# –ò–ú–ü–û–†–¢–´ –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï
import discord
import datetime
from discord.ext import commands
from discord import embeds
from discord import Option
from discord.ext import commands, tasks
from discord.ui import View, Button


import sqlite3
import json
from tabulate import tabulate

import re
import random
import math
from config import settings
from collections import defaultdict  

connection = sqlite3.connect('server.db')
cursor = connection.cursor()

intents = discord.Intents().all()
bot = commands.Bot(command_prefix=settings['PREFIX'], intents=intents)
bot.remove_command('help')
int_pattern = re.compile(r'^\s*[-+]?\d+\s*$')
# –ö–û–ù–ï–¶ –ò–ú–ü–û–†–¢–û–í –ò –ü–ï–†–ï–ú–ï–ù–ù–´–•

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–∞–∫ {bot.user.name}')
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        name TEXT,
        id INT,
        cash BIGINT,
        rep INT
    )""")

    for guild in bot.guilds:
        for member in guild.members:
            if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
                cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0)")
        else:
            pass
    connection.commit()

# –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –ë–ê–õ–ê–ù–°–û–ú    
@bot.event
async def on_member_join(member):
    if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
        cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0)")
        connection.commit()
    else:
        pass

@bot.command(aliases = ['balance', 'cash'])
async def __balance(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send(embed = discord.Embed(
            description= f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{ctx.author}** —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]} :leaves:**"""
        ))
    else:
        await ctx.send(embed = discord.Embed(
        description= f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{member}** —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(member.id)).fetchone()[0]} :leaves:**"""
        ))

    await ctx.message.delete()
@bot.command(aliases = ['award'])
@commands.has_permissions(administrator = True)
async def __award(ctx, member: discord.Member = None, amount: int = None):
    if member is None:
        await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –≤—ã–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É")
    else:
        if amount is None:
            await ctx.send(f"**{ctx.author}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å**")
        elif int(amount) < 1:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1")
        else:
            cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(int(amount), member.id))
            connection.commit()

            await ctx.message.add_reaction('üî¥')
# –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –ë–ê–õ–ê–ù–°–û–ú    
      
user_messages = {}
previous_message = None

class MyView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.button_clicked = set()
    
    @discord.ui.button(label="–ù–∞–∂–º–∏ –º–µ–Ω—è!", style=discord.ButtonStyle.primary, emoji="üòé", disabled=False)
    async def button_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        user_id = interaction.user.id
        if user_id in self.button_clicked:
            self.button_clicked.remove(user_id)
            button.label = f"–ù–∞–∂–∞–ª–æ: {len(self.button_clicked)}"
            await interaction.response.edit_message(view=self)
            await interaction.response.send_message("–í—ã –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!")
        else:
            self.button_clicked.add(user_id)
            button.label = f"–ù–∞–∂–∞–ª–æ: {len(self.button_clicked)}"
            await interaction.response.edit_message(view=self)
            await interaction.response.send_message("–í—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!")


@bot.slash_command(name='roulette', description='–†—É–ª–µ—Ç–∫–∞')
async def roulette(ctx):
    global previous_message
    
    if previous_message:
        await previous_message.delete_original_message()

    instructions = await ctx.send('–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞:')
    view = MyView()
    button = view.children[0]
    button.disabled = False
    button.label = "–ù–∞–∂–∞–ª–æ: 0"
    previous_message = instructions
    await instructions.edit(view=view)

@bot.slash_command(name="bet", description='–°—Ç–∞–≤–∫–∞')
async def bet(ctx, bid: Option(int, name='bid', description='0(00) - 36', required=True), bet: Option(int, name='bet', description='–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏', required=True), member: discord.Member = None):
    global previous_message
    global user_messages

    if member is None:
        member = ctx.author

    balance = cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]
    
    if balance - bet > 0:
        valid_input = bid in [0, 00] or (0 < bid < 37)
        if valid_input:
            if ctx.author.id not in user_messages:
                user_messages[ctx.author.id] = f"{str(bid)} - {str(bet)}"
                cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(int(bet), member.id))
                view = MyView()
                button = view.children[0]
                button.disabled = False
                button.label = "–ù–∞–∂–∞–ª–æ: 0"
                if previous_message:
                    await previous_message.edit(content='–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞:', view=view)
                else:
                    previous_message = await ctx.send('–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞:', view=view)
            else:
                user_messages[ctx.author.id] += f"\n{str(bid)} - {str(bet)}"
                cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(int(bet), member.id))
            connection.commit()
            if previous_message:
                updated_text = previous_message.content
                for user_id, message in user_messages.items():
                    user = bot.get_user(user_id)
                    updated_text += f"\n\n**{user.name}:**\n{message}"

                await previous_message.edit(content=updated_text)
            else:
                await ctx.respond("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await ctx.respond("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 (00) –¥–æ 36.")
    else:
        await ctx.respond("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")

# @bot.command()
# async def game(ctx, member: discord.Member = None):
#     if ctx.bot.game_choice is None:
#         await ctx.send('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.')
#         return
#     await ctx.send("–ù–∞—á–∞–ª–æ")

#     rand = random.randint(1, 4)

#     if member is None:
#         member = ctx.author

#     await ctx.send(f'–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {rand}')

#     if ctx.bot.game_choice == rand:
#         cursor.execute("UPDATE users SET cash = cash + 20 WHERE id = {}".format(member.id))
#         connection.commit()
#         await ctx.send(f'{member.mention}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {rand}')
#     else:
#         cursor.execute("UPDATE users SET cash = cash - 20 WHERE id = {}".format(member.id))

#         connection.commit()
#         await ctx.send(f'{member.mention}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {rand}')
# –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –†–£–õ–ï–¢–ö–û–ô    


# –ö–û–ú–ú–ê–ù–î–ê !HELP 
@bot.command()
async def help(ctx):
    prefix = settings['PREFIX']
    commands = [
        {'name': 'help', 'value': '–ö–æ–º–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–≠—Ç–∞ –∫–æ–º–º–∞–Ω–¥–∞)'},
        {'name': 'roulette', 'value': '–ù–∞—á–∞–ª–æ —Ä—É–ª–µ—Ç–∫–∏'},
        {'name': 'bet', 'value': '–õ–æ—Ç –∏ —Å—Ç–∞–≤–∫–∞'},
        {'name': 'balance', 'value': '–í–∞—à–∏ –¥–µ–Ω—å–≥–∏'},
        {'name': 'work', 'value': '–í—ã–¥–∞–µ—Ç 200:leaves:. –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥'},
        {'name': 'salary', 'value': '–í—ã–¥–∞–µ—Ç 5000:leaves:. –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞'},
        {'name': 'award', 'value': '–í—ã–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)'}
    ]

    emb = discord.Embed(title='–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')
    for command in commands:
        emb.add_field(name=f'{prefix}{command["name"]}', value=command['value'], inline=False)

    await ctx.send(embed=emb)
    await ctx.message.delete()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
@commands.cooldown(1, 30, commands.BucketType.user)    
@bot.command()
async def work(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author
    cursor.execute("UPDATE users SET cash = cash + 200 WHERE id = {}".format(member.id))
    connection.commit()
    await ctx.send(f'{member.mention}, **–≤—ã –ø–æ–ª—É—á–∏–ª–∏ 200 :leaves:**!')
    await ctx.message.delete()
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        retry_after = str(datetime.timedelta(seconds=error.retry_after)).split('.')[0]
        await ctx.send(f'**–í—ã —É—Å—Ç–∞–ª–∏! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {retry_after}**')

@commands.cooldown(1, 86400, commands.BucketType.user)    
@bot.command()
async def salary(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author
    cursor.execute("UPDATE users SET cash = cash + 5000 WHERE id = {}".format(member.id))
    connection.commit()
    await ctx.send(f'{member.mention}, **–≤—ã –ø–æ–ª—É—á–∏–ª–∏ 5000 :leaves:**!')
    await ctx.message.delete()
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        retry_after = str(datetime.timedelta(seconds=error.retry_after)).split('.')[0]
        await ctx.send(f'**–°–ª–µ–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {retry_after}**')

@bot.slash_command(name='gift', description='–ü–æ–¥–∞—Ä–∏—Ç—å –¥–µ–Ω—å–≥–∏')
async def gift(ctx, recipient: Option(str, name='–ø–æ–ª—É—á–∞—Ç–µ–ª—å', description='–ü–æ–ª—É—á–∞—Ç–µ–ª—å', required=True), amount: Option(int, name='—Å—É–º–º–∞', description='–°—É–º–º–∞ –ø–æ–¥–∞—Ä–∫–∞', required=True)):
    recipient_member = None
    for member in ctx.guild.members:
        if member.name.lower() == recipient.lower():
            recipient_member = member
            break

    if recipient_member is None:
        await ctx.send(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        if amount < 1:
            await ctx.send(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–∞ –±–æ–ª—å—à–µ 1.")
        else:
            cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(gift, recipient_member.id))
            cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(gift, ctx.author.id))
            connection.commit()
            await ctx.send(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–∏–ª–∏ {amount} –¥–µ–Ω–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}.")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(settings['TOKEN'])
