# –ò–ú–ü–û–†–¢–´ –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï

import discord
import datetime
from discord.ext import commands
from discord import embeds
from discord import Option
from discord.ext import commands, tasks

import sqlite3
import json
from tabulate import tabulate

import re
import random
import math
from config import settings
from collections import defaultdict  

connection = sqlite3.connect('server.db')
cursor = connection.cursor()

intents = discord.Intents().all()
bot = commands.Bot(command_prefix=settings['PREFIX'], intents=intents)
bot.remove_command('help')
int_pattern = re.compile(r'^\s*[-+]?\d+\s*$')

# –ö–û–ù–ï–¶ –ò–ú–ü–û–†–¢–æ–≤ –ò –ü–ï–†–ï–ú–ï–ù–ù–´–•

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–∞–∫ {bot.user.name}')
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        name TEXT,
        id INT,
        cash BIGINT,
        rep INT
    )""")

    for guild in bot.guilds:
        for member in guild.members:
            if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
                cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0)")
        else:
            pass
    connection.commit()



# –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –ë–ê–õ–ê–ù–°–û–ú    
@bot.event
async def on_member_join(member):
    if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
        cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0)")
        connection.commit()
    else:
        pass

@bot.command(aliases = ['balance', 'cash'])
async def __balance(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send(embed = discord.Embed(
            description= f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{ctx.author}** —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]} :leaves:**"""
        ))
    else:
        await ctx.send(embed = discord.Embed(
        description= f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{member}** —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(member.id)).fetchone()[0]} :leaves:**"""
        ))

    await ctx.message.delete()
@bot.command(aliases = ['award'])
@commands.has_permissions(administrator = True)
async def __award(ctx, member: discord.Member = None, amount: int = None):
    if member is None:
        await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –≤—ã–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É")
    else:
        if amount is None:
            await ctx.send(f"**{ctx.author}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å**")
        elif int(amount) < 1:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1")
        else:
            cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(int(amount), member.id))
            connection.commit()

            await ctx.message.add_reaction('üî¥')

# –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –ë–ê–õ–ê–ù–°–û–ú    
    
  
previous_message = None
user_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@bot.command()
async def startgame(ctx):
    global previous_message
    instructions = await ctx.send('–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞:')
    previous_message = instructions

@bot.command()
async def bet(ctx, *, new_text):
    global previous_message
    global user_messages
    valid_input = new_text.isdigit() and 0 <= int(new_text) <= 36 or int(new_text) == 00
    if valid_input:
        if ctx.author.id not in user_messages:
            user_messages[ctx.author.id] = new_text
        else:
            user_messages[ctx.author.id] += f"\n{new_text}"

        await ctx.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if previous_message:
            updated_text = previous_message.content
            for user_id, message in user_messages.items():
                user = bot.get_user(user_id)
                updated_text += f"\n\n**{user.name}:**\n{message}"

            await previous_message.edit(content=updated_text)
        else:
            await ctx.send("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 (00) –¥–æ 36.")

client = discord.Client(intents=intents)

@bot.command()
async def on_message(ctx):
    colors = ["black", "red"]
    radius = 6  
    chessboard = ""
    for row in range(-radius, radius + 1):
        for col in range(-radius, radius + 1):
            distance = math.sqrt(row**2 + col**2)
            if distance <= radius:
                if distance <= radius - 1:
                    chessboard += ":brown_square:"
                else:
                    if row == 0 and col == 0:
                        chessboard += ":white_circle:"
                    else:
                        color = colors[int(distance) % 2]
                        chessboard += f":{color}_circle:"
            else:
                chessboard += ":brown_square:"
        chessboard += "\n"

    embed = discord.Embed(title="–†—É–ª–µ—Ç–∫–∞", description=chessboard, color=discord.Color.default())
    await ctx.send(embed=embed)

@bot.slash_command(name="sgame", description='–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã')
async def sgame(ctx, foo: Option(str, #—Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤–≤–æ–¥–∞
                                 name='—Ä–æ–ª—å', #–∏–º—è –æ–ø—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                                 description='Bar', #–æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ü–∏–∏
                                 required=True)): #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    pass


# @bot.command()
# async def bet(ctx, bet):
#     # if ctx.bot.game_choice is None:
#     #     start_message = await ctx.send('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.')
#     message = await ctx.send(f"@{ctx.message.author.name} {bet}")
#     await message.edit(content='–°—Ç–∞–≤–∫–∞: {bet}')
#     if ctx.message.author.bot:
#         return

#     if not int_pattern.match(bet):
#         return await ctx.send("–û—à–∏–±–∫–∞! –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞–≤–∫—É!")
#     num = int(bet)
#     if num <= 0:
#         return await ctx.send("–ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–ª—é!")
#     return await ctx.send(f"–°—Ç–∞–≤–∫–∞: {num}")


@bot.command()
async def game(ctx, member: discord.Member = None):
    if ctx.bot.game_choice is None:
        await ctx.send('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.')
        return
    await ctx.send("–ù–∞—á–∞–ª–æ")

    rand = random.randint(1, 4)

    if member is None:
        member = ctx.author

    await ctx.send(f'–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {rand}')

    if ctx.bot.game_choice == rand:
        cursor.execute("UPDATE users SET cash = cash + 20 WHERE id = {}".format(member.id))
        connection.commit()
        await ctx.send(f'{member.mention}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {rand}')
    else:
        cursor.execute("UPDATE users SET cash = cash - 20 WHERE id = {}".format(member.id))

        connection.commit()
        await ctx.send(f'{member.mention}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {rand}')
# –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –†–£–õ–ï–¢–ö–û–ô    


# –ö–û–ú–ú–ê–ù–î–ê !HELP 
@bot.command(pass_context = True)
async def help(ctx):
    emb = discord.Embed(title = '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–º–º–∞–Ω–¥–∞–º')
    emb.add_field(name= '{}start'.format(settings['PREFIX']), value = '–ù–∞—á–∞–ª–æ —Ä—É–ª–µ—Ç–∫–∏')
    emb.add_field(name= '{}balance'.format(settings['PREFIX']), value = '–í–∞—à–∏ –¥–µ–Ω—å–≥–∏')
    emb.add_field(name= '{}work'.format(settings['PREFIX']), value = '–í—ã–¥–∞–µ—Ç 200:leaves:. –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥')
    emb.add_field(name= '{}award'.format(settings['PREFIX']), value = '–í—ã–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)')
    await ctx.send(embed = emb)
    await ctx.message.delete()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
@commands.cooldown(1, 30, commands.BucketType.user)    
@bot.command()
async def work(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author
    cursor.execute("UPDATE users SET cash = cash + 200 WHERE id = {}".format(member.id))
    connection.commit()
    await ctx.send(f'{member.mention}, **–≤—ã –ø–æ–ª—É—á–∏–ª–∏ 200 :leaves:**!')
    await ctx.message.delete()
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        retry_after = str(datetime.timedelta(seconds=error.retry_after)).split('.')[0]
        await ctx.send(f'**–í—ã —É—Å—Ç–∞–ª–∏! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {retry_after}**')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(settings['TOKEN'])
    