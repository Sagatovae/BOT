# –ò–ú–ü–û–†–¢–´ –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï
import discord
import datetime
from discord.ext import commands
from discord import embeds
from discord import Option
from discord.ext import commands, tasks
from discord.ui import View, Button
import colorsys


import sqlite3
from tabulate import tabulate

import re
import random
from config import settings
from collections import defaultdict  

import asyncio

connection = sqlite3.connect('server.db')
cursor = connection.cursor()

intents = discord.Intents().all()
bot = commands.Bot(command_prefix=settings['PREFIX'], intents=intents)
bot.remove_command('help')
int_pattern = re.compile(r'^\s*[-+]?\d+\s*$')
# –ö–û–ù–ï–¶ –ò–ú–ü–û–†–¢–û–í –ò –ü–ï–†–ï–ú–ï–ù–ù–´–•

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–∞–∫ {bot.user.name}')
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        name TEXT,
        id INT,
        cash BIGINT,
        rep INT
    )""")

    for guild in bot.guilds:
        for member in guild.members:
            if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
                cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0)")
        else:
            pass
    connection.commit()

# –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –ë–ê–õ–ê–ù–°–û–ú    
@bot.event
async def on_member_join(member):
    if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
        cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0)")
        connection.commit()
    else:
        pass

@bot.command(aliases = ['balance', 'cash'])
async def __balance(ctx, member: discord.Member = None):
    if member is None:
        msg = await ctx.send(embed = discord.Embed(
            description= f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{ctx.author}** —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]} :leaves:**"""
        ))
    else:
        msg = await ctx.send(embed = discord.Embed(
            escription= f"""–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{member}** —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{cursor.execute("SELECT cash FROM users WHERE id = {}".format(member.id)).fetchone()[0]} :leaves:**"""
        ))
    await asyncio.sleep(5)
    await msg.delete()


    await ctx.message.delete()
@bot.command(aliases = ['award'])
@commands.has_permissions(administrator = True)
async def __award(ctx, member: discord.Member = None, amount: int = None):
    if member is None:
        await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –≤—ã–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É")
    else:
        if amount is None:
            await ctx.send(f"**{ctx.author}, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å**")
        elif int(amount) < 1:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 1")
        else:
            cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(int(amount), member.id))
            connection.commit()

            await ctx.message.add_reaction('üî¥')
# –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –ë–ê–õ–ê–ù–°–û–ú    
      
user_messages = {}
previous_message = None

class MyView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.button_clicked = set()
    
    @discord.ui.button(label="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", style=discord.ButtonStyle.primary, emoji="‚úÖ", disabled=False)
    async def button_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        user_id = interaction.user.id
        if user_id in self.button_clicked:
            self.button_clicked.remove(user_id)
            button.label = f"–ì–æ—Ç–æ–≤—ã: {len(self.button_clicked)}"
            await interaction.response.edit_message(view=self)
        else:
            if user_id in user_bets:
                self.button_clicked.add(user_id)
                button.label = f"–ù–∞–∂–∞–ª–æ: {len(self.button_clicked)}"
                await interaction.response.edit_message(view=self)
            else:
                msg = await interaction.response.send_message("–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É.")
                await asyncio.sleep(5)
                await msg.delete()


game_ended = False

# –ö–û–ú–ú–ê–ù–î–ê !HELP 
@bot.command()
async def help(ctx):
    prefix = settings['PREFIX']
    commands = [
        {'name': 'help', 'value': '–ö–æ–º–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–≠—Ç–∞ –∫–æ–º–º–∞–Ω–¥–∞)'},
        {'name': 'roulette', 'value': '–ù–∞—á–∞–ª–æ —Ä—É–ª–µ—Ç–∫–∏'},
        {'name': 'bet', 'value': '–õ–æ—Ç –∏ —Å—Ç–∞–≤–∫–∞'},
        {'name': 'balance', 'value': '–í–∞—à–∏ –¥–µ–Ω—å–≥–∏'},
        {'name': 'work', 'value': '–í—ã–¥–∞–µ—Ç 200:leaves:. –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥'},
        {'name': 'salary', 'value': '–í—ã–¥–∞–µ—Ç 5000:leaves:. –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞'},
        {'name': 'award', 'value': '–í—ã–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ (–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)'}
    ]

    emb = discord.Embed(title='–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º')
    for command in commands:
        emb.add_field(name=f'{prefix}{command["name"]}', value=command['value'], inline=False)

    await ctx.send(embed=emb)
    await ctx.message.delete()


# @bot.command()
# async def startgame(ctx):
#     embed = discord.Embed(title='–ü–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è embed')
#     embed.add_field(name='–ü–æ–ª–µ 1', value='–ó–Ω–∞—á–µ–Ω–∏–µ 1')
#     embed.add_field(name='–ü–æ–ª–µ 2', value='–ó–Ω–∞—á–µ–Ω–∏–µ 2')
#     embed.add_field(name='–ü–æ–ª–µ 3', value='–ó–Ω–∞—á–µ–Ω–∏–µ 3')

#     message = await ctx.send(embed=embed)

#     colors = ['#FFFFFF', '#000000']
#     index = 0

#     while True:
#         color_start = colors[index]
#         color_end = colors[(index + 1) % len(colors)]
#         index = (index + 1) % len(colors)

#         for i in range(101):
#             ratio = i / 100.0
#             rgb_start = tuple(int(color_start[i:i+2], 16) for i in (1, 3, 5))
#             rgb_end = tuple(int(color_end[i:i+2], 16) for i in (1, 3, 5))

#             rgb = [int((1 - ratio) * rgb_start[j] + ratio * rgb_end[j]) for j in range(3)]
#             color = discord.Color.from_rgb(rgb[0], rgb[1], rgb[2])

#             embed.color = color
#             await message.edit(embed=embed)

#             await asyncio.sleep(0.5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞
@commands.cooldown(1, 30, commands.BucketType.user)    
@bot.command()
async def work(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author
    cursor.execute("UPDATE users SET cash = cash + 200 WHERE id = {}".format(member.id))
    connection.commit()
    await ctx.send(f'{member.mention}, **–≤—ã –ø–æ–ª—É—á–∏–ª–∏ 200! –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]} :leaves:**')
    await ctx.message.delete()
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        retry_after = str(datetime.timedelta(seconds=error.retry_after)).split('.')[0]
        msg = await ctx.send(f'**–í—ã —É—Å—Ç–∞–ª–∏! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {retry_after}**')
        await asyncio.sleep(5)
        await msg.delete()
@commands.cooldown(1, 48200, commands.BucketType.user)    
@bot.command()
async def salary(ctx, member: discord.Member = None):
    if member is None:
        member = ctx.author
    cursor.execute("UPDATE users SET cash = cash + 5000 WHERE id = {}".format(member.id))
    connection.commit()
    await ctx.send(f'{member.mention}, **–≤—ã –ø–æ–ª—É—á–∏–ª–∏ 5000! –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]} :leaves:**')
    await ctx.message.delete()
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        retry_after = str(datetime.timedelta(seconds=error.retry_after)).split('.')[0]
        msg = await ctx.send(f'**–°–ª–µ–¥—É—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {retry_after}**')
        await asyncio.sleep(5)
        await msg.delete()
@bot.slash_command(name='gift', description='–ü–æ–¥–∞—Ä–∏—Ç—å –¥–µ–Ω—å–≥–∏')
async def gift(ctx, recipient: Option(str, name='–ø–æ–ª—É—á–∞—Ç–µ–ª—å', description='–ü–æ–ª—É—á–∞—Ç–µ–ª—å', required=True), amount: Option(int, name='—Å—É–º–º–∞', description='–°—É–º–º–∞ –ø–æ–¥–∞—Ä–∫–∞', required=True), reason: Option(str, name='–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', description='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', required=False)):
    await ctx.defer()
    numbers = ''.join(c if c.isdigit() else ' ' for c in recipient).split()
    member = ''.join(numbers)
    if amount < 1:
        await ctx.respond(f"**–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–∞ –±–æ–ª—å—à–µ 1:leaves:**")
    else:
        cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(amount, member))
        cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(amount, ctx.author.id))
        connection.commit()
        if reason:
            msg = await ctx.respond(f"**{ctx.author.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–∏–ª–∏ {amount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}. –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {cursor.execute('SELECT cash FROM users WHERE id = {}'.format(ctx.author.id)).fetchone()[0]} :leaves:.**")
        else:
            msg = await ctx.respond(f"**{ctx.author.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–∏–ª–∏ {amount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}. –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {cursor.execute('SELECT cash FROM users WHERE id = {}'.format(ctx.author.id)).fetchone()[0]} :leaves:.**")
        await asyncio.sleep(5)
        await msg.delete()
            

user_bets = {}

class MyModal(discord.ui.Modal):
    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.add_item(discord.ui.InputText(label="Bid 0(00) - 36"))
        self.add_item(discord.ui.InputText(label="Bet"))

    async def callback(self, interaction: discord.Interaction):
        bid = self.children[0].value
        bet = self.children[1].value

        embed = discord.Embed(title="Modal Results")
        embed.add_field(name="Bid 0(00) - 36", value=bid)
        embed.add_field(name="Bet", value=bet)

        message = await interaction.response.fetch_message()
        await message.edit(content="–†—É–ª–µ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å:", embed=embed)


@bot.slash_command(name='roulette', description='–†—É–ª–µ—Ç–∫–∞')
async def roulette(ctx):
    await ctx.defer()

    modal = MyModal(title="Modal")
    await ctx.send_modal(modal)


@bot.slash_command(name="bet", description='–°—Ç–∞–≤–∫–∞')
async def bet(ctx, member: discord.Member = None):
    global previous_message, user_bets
    if member is None:
        member = ctx.author

    modal = MyModal(title="Modal")
    await ctx.send_modal(modal)

    def check(interaction: discord.Interaction):
        return interaction.user == ctx.author and interaction.message == interaction.message

    try:
        interaction = await bot.wait_for("interaction", check=check, timeout=60.0)
        bid = interaction.data["values"]["Bid 0(00) - 36"]
        bet = interaction.data["values"]["Bet"]

        embed = discord.Embed(color=discord.Color.green())
        balance = cursor.execute("SELECT cash FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]
        if balance - bet > 0:
            if bet >= 25:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ —Å—Ç–∞–≤–∫–µ –≤ 25 —à–µ–∫–µ–ª–µ–π
                valid_input = int(bid) in [0, 00] or (0 < int(bid) < 37)
                if valid_input:
                    if ctx.author.id not in user_bets:
                        user_bets[ctx.author.id] = {}

                    if bid not in user_bets[ctx.author.id]:
                        user_bets[ctx.author.id][bid] = 0

                    user_bets[ctx.author.id][bid] += bet

                    if len(user_bets[ctx.author.id]) <= 3:
                        cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(int(bet), member.id))
                        connection.commit()

                        if previous_message:
                            await ctx.defer()
                            updated_text = previous_message.content
                            for user_id, bets in user_bets.items():
                                user = bot.get_user(user_id)
                                bet_messages = "\n".join([f"{str(bid)} - {str(total_bet)}" for bid, total_bet in bets.items()])
                                updated_text += f"\n\n**{user.name}:**\n{bet_messages}"
                            await previous_message.edit(content=updated_text)
                            smt = await ctx.respond("–æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                            await smt.delete()
                        else:
                            msg = await ctx.send("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    else:
                        msg = await ctx.send("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫.")
                else:
                    msg = await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 (00) –¥–æ 36.")
            else:
                msg = await ctx.send("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 25:leaves:")
        else:
            msg = await ctx.respond("–ë–µ–¥–Ω—è–∂–∫–∞")
        await asyncio.sleep(2)
        await msg.delete()
        await ctx.defer()
        smt = await ctx.respond("–æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        await smt.delete()
    except asyncio.TimeoutError:
        await ctx.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")

@bot.slash_command(name="start", description='–°—Ç–∞—Ä—Ç')
async def start(ctx, member: discord.Member = None):
    await ctx.defer()
    global previous_message

    if member is None:
        member = ctx.author

    if previous_message:
        rand = random.choice(['00', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36'])
        updated_text = previous_message.content
        updated_text = updated_text.replace("–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞:", f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {str(rand)}")
        updated_text = updated_text.replace("–ù–∞–∂–∞–ª–æ: 0", "")
        updated_text = updated_text.replace("–ù–∞–∂–∞–ª–æ: 1", "")

        bet_messages = []
        for user_id, bets in user_bets.items():
            user = bot.get_user(user_id)
            if user is not None:
                user_bet_messages = []
                total_winnings = 0
                for bid, bet in bets.items():
                    winnings = 0
                    if str(bid) == str(rand):
                        winnings = bet * 36
                        cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(winnings, user_id))
                    user_bet_messages.append(f"–ß–∏—Å–ª–æ: {bid}")
                    total_winnings += winnings
                if user_bet_messages:
                    user_bet_messages_str = "\n".join(user_bet_messages)
                    bet_messages.append(f"**{user.name}:**\n{user_bet_messages_str}\n–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {total_winnings} :leaves:")
                smt = await ctx.respond("–æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                await smt.delete()                
        if bet_messages:
            bet_messages_str = "\n\n".join(bet_messages)
            updated_text += f"\n\n{bet_messages_str}"
        else:
            await ctx.respond("–ù–∏ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –∏–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É.")

        await previous_message.edit(content=updated_text, view=None)
        user_bets.clear()  # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Å—Ç–∞–≤–∫–∞–º–∏ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        await asyncio.sleep(8)
        await previous_message.delete()

    else:
        await ctx.respond("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(settings['TOKEN'])